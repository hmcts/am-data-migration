#!groovy

@Library('Infrastructure') _

import uk.gov.hmcts.contino.AppPipelineConfig

properties([
    pipelineTriggers([cron('H 05 * * *')]),
    parameters([
        string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test')
        //choice(name: 'ENVIRONMENT', choices: 'saat\nsprod\naat\nprod', description: 'Environment where migration should be run'),
        //choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in')
    ])
])

def secretId = "am-lib-test-aat"
def product = "am"
def component = "migration"

def secrets = [
    (secretId): [
        secret('am-lib-test-POSTGRES-HOST', 'DATABASE_HOST'),
        secret('am-lib-test-POSTGRES-PORT', 'DATABASE_PORT'),
        secret('am-lib-test-POSTGRES-DATABASE', 'DATABASE_NAME'),
        secret('am-lib-test-POSTGRES-USER', 'DATABASE_USER'),
        secret('am-lib-test-POSTGRES-PASS', 'DATABASE_PASS')
    ]
]

static Map<String, Object> secret(String secretName, String envVar) {
    [
        $class     : 'AzureKeyVaultSecret',
        secretType : 'Secret',
        name       : secretName,
        envVariable: envVar
    ]
}

node {
    stage('Checkout') {
        deleteDir()
        checkout scm
    }

    if (params.ENVIRONMENT == 'aat') {
        env.DB_HOST = 'localhost'
        env.DB_PORT = '5432'
        env.DB_NAME = 'am'
        env.DB_USER = 'amuser'
        env.DB_PASS = ''
    } else {
        env.DB_HOST = 'localhost'
        env.DB_PORT = '5432'
        env.DB_NAME = 'am'
        env.DB_USER = 'amuser'
        env.DB_PASS = ''
    }

    stage('Run migration') {
        //def config = new AppPipelineConfig()
        //config.vaultSecrets = secrets

        //withSubscription(params.SUBSCRIPTION) {
        //    withTeamSecrets(config, params.ENVIRONMENT) {

                setVaultName('am-lib-test')
                loadVaultSecrets(secrets)

                docker.image('jbergknoff/postgresql-client').inside("--entrypoint='' -e PGPASSWORD=${DATABASE_PASS} -v ${WORKSPACE}:/migration") {
                    sh """
                        chmod 777 /migration/ccd-to-am-migration-runner.sh
                        /migration/ccd-to-am-migration-runner.sh ${DATABASE_HOST} ${DATABASE_PORT} ${DATABASE_NAME} ${DATABASE_USER} ccd-to-am-migration-main.sql
                        rm -rf /migration
                    """
                }
        //    }
        //}
    }
}

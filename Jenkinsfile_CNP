#!groovy

@Library('Infrastructure') _

import uk.gov.hmcts.contino.AppPipelineConfig

properties([
    pipelineTriggers([cron('H 05 * * *')]),
    parameters([
        choice(name: 'ENVIRONMENT', choices: 'aat\nsaat\nprod\nsprod', description: 'Environment where migration should be run'),
        choice(name: 'SUBSCRIPTION', choices: 'nonprod\nprod\nsandbox', description: 'Azure subscriptions available to build in')
    ])
])

def credentialsId = 'am-lib-test-aat'
def secretId = 'am-lib-test-aat'
def secrets = [
    (secretId): [
        secret('am-lib-test-STORAGE-ACCOUNT-NAME', 'STORAGE_NAME'),
        secret('am-lib-test-STORAGE-ACCOUNT-KEY', 'STORAGE_KEY'),
        secret('am-lib-test-POSTGRES-HOST', 'DATABASE_HOST'),
        secret('am-lib-test-POSTGRES-PORT', 'DATABASE_PORT'),
        secret('am-lib-test-POSTGRES-DATABASE', 'DATABASE_NAME'),
        secret('am-lib-test-POSTGRES-USER', 'DATABASE_USER'),
        secret('am-lib-test-POSTGRES-PASS', 'DATABASE_PASS')
    ]
]

static Map<String, Object> secret(String secretName, String envVar) {
    [
        $class     : 'AzureKeyVaultSecret',
        secretType : 'Secret',
        name       : secretName,
        envVariable: envVar
    ]
}

node {
    stage('Checkout') {
        deleteDir()
        checkout scm
    }

    stage('Run migration') {
        def config = new AppPipelineConfig()
        config.vaultSecrets = secrets

        def source = 'data/am-migration.csv'
        def destination = '.'

        // download migration data from azure blob storage
        withDocker('hmcts/moj-azcopy-image:7.2.0-netcore-1.0', '-u root') {
            //withCredentials([usernamePassword(credentialsId: "${credentialsId}", passwordVariable: 'am-lib-test-STORAGE-ACCOUNT-KEY', usernameVariable: 'am-lib-test-STORAGE-ACCOUNT-NAME')]) {
            withTeamSecrets(config, params.ENVIRONMENT) {
                sh "azcopy \
                    --source https://${STORAGE_NAME}.blob.core.windows.net/${source} \
                    --source-key ${STORAGE_KEY} \
                    --destination ${destination}"
            }
        }

        // run migration scripts in postgres container
        withDocker('jbergknoff/postgresql-client', "--entrypoint='' -e PGPASSWORD=${DATABASE_PASS} -v ${WORKSPACE}:/migration") {
            //withCredentials([usernamePassword(credentialsId: "${credentialsId}", passwordVariable: 'DATABASE_PASS', usernameVariable: 'DATABASE_USER')]) {
            withTeamSecrets(config, params.ENVIRONMENT) {
                sh """
                    chmod 777 /migration/ccd-to-am-migration-runner.sh
                    /migration/ccd-to-am-migration-runner.sh ${DATABASE_HOST} ${DATABASE_PORT} ${DATABASE_NAME} ${DATABASE_USER} ccd-to-am-migration-main.sql
                    rm -rf /migration
                """
            }
        }
    }
}

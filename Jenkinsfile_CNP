#!groovy

@Library('Infrastructure') _

import uk.gov.hmcts.contino.AppPipelineConfig

properties([
    parameters([
        choice(name: 'ENVIRONMENT', choices: 'aat\nprod', description: 'Environment where migration should be run'),
        string(name: 'MIGRATION_DATA_FILENAME', defaultValue: 'am-migration.csv', description: 'Name of migration data file in Azure Blob Store'),
        string(name: 'MIGRATION_SCRIPT_FILENAME', defaultValue: 'am-migration-init.sql', description: 'Name of migration script to execute')
    ])
])

def secretId = "am-lib-test-${params.ENVIRONMENT}"
def secrets = [
    (secretId): [
        secret('am-lib-test-STORAGE-ACCOUNT-NAME', 'STORAGE_NAME'),
        secret('am-lib-test-STORAGE-ACCOUNT-KEY', 'STORAGE_KEY'),
        secret('am-lib-test-POSTGRES-HOST', 'DATABASE_HOST'),
        secret('am-lib-test-POSTGRES-PORT', 'DATABASE_PORT'),
        secret('am-lib-test-POSTGRES-DATABASE', 'DATABASE_NAME'),
        secret('am-lib-test-POSTGRES-USER', 'DATABASE_USER'),
        secret('am-lib-test-POSTGRES-PASS', 'DATABASE_PASS')
    ]
]

static Map<String, Object> secret(String secretName, String envVar) {
    [
        $class     : 'AzureKeyVaultSecret',
        secretType : 'Secret',
        name       : secretName,
        envVariable: envVar
    ]
}

node {

    def config = new AppPipelineConfig()
    config.vaultSecrets = secrets

    def subscription = {
        "${params.ENVIRONMENT}" == 'prod' ? 'prod' : 'nonprod'
    }

    print subscription

    stage('Checkout') {
        deleteDir()
        checkout scm
    }

    // download migration data from azure blob storage
    stage('Download migration data') {
        def source = "data/${params.MIGRATION_DATA_FILENAME}"
        def destination = "${WORKSPACE}/am-migration.csv"

        withSubscription(subscription) {
            withTeamSecrets(config, params.ENVIRONMENT) {
                withDocker('hmcts/moj-azcopy-image:7.2.0-netcore-1.0', '-u root') {
                    sh "azcopy \
                        --source https://${STORAGE_NAME}.blob.core.windows.net/${source} \
                        --source-key ${STORAGE_KEY} \
                        --destination ${destination}"
                }
            }
        }
    }

    // run migration scripts in postgres container
    stage('Run migration scripts') {
        withSubscription(params.SUBSCRIPTION) {
            withTeamSecrets(config, params.ENVIRONMENT) {
                withDocker('jbergknoff/postgresql-client', "--entrypoint='' -e PGPASSWORD=${DATABASE_PASS} -v ${WORKSPACE}:/migration") {
                    sh "chmod +x /migration/am-migration-runner.sh"
                    sh "/migration/am-migration-runner.sh \
                        ${DATABASE_HOST} \
                        ${DATABASE_PORT} \
                        ${DATABASE_NAME} \
                        ${DATABASE_USER} \
                        ${params.MIGRATION_SCRIPT_FILENAME}"
                }
            }
        }
    }

    stage('Clean up') {
        deleteDir()
    }
}

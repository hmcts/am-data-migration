#!groovy

@Library('Infrastructure') _

properties([
    parameters([
        choice(name: 'ENVIRONMENT', choices: 'saat\nsprod\naat\nprod', description: 'Environment where migration should be run'),
        choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in')
    ])
])

def hostname = "localhost"
def port = "5432"
def db_name = "am"
def db_user = "amuser"
def migration_script = "ccd-to-am-migration-main.sql"

pipeline {
    agent any
    stages {
        stage('Set up postgres docker container') {
            steps {
                sh '''
                    mkdir migration
                    cd migration
                    docker pull postgres
                    docker run --rm --name pg-docker -d postgres
                    docker cp ../migration pg-docker:/
                '''
            }
        }
        stage('Run migration script') {
            steps {
                sh '''
                    winpty docker exec -t pg-docker bash
                    cd /migration
                    chmod 777 ccd-to-am-migration-runner.sh
                    ./ccd-to-am-migration-runner.sh localhost 5432 am amuser ccd-to-am-migration-main.sql
                '''
            }
        }
    }
}
